name: Release - ShadowMask

on:
  release:
    types: [published, edited, prereleased]

env:
  PACKAGE_NAME: "shadowmask"
  OWNER: "John-Varghese-EH"

permissions:
  contents: write
  id-token: write

jobs:

  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  build_wheels:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install build tools
        run: python -m pip install --upgrade build

      - name: Set project version (if needed)
        run: |
          # Optionally update version in pyproject.toml/setup.cfg here

      - name: Build source and wheel distribution
        run: python -m build

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  build_binaries:
    needs: [details, check_pypi]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: shadowmask-linux
            pyinstaller_name: shadowmask-linux
          - os: windows-latest
            artifact_name: shadowmask-windows.exe
            pyinstaller_name: shadowmask-windows.exe
          - os: macos-latest
            artifact_name: shadowmask-macos
            pyinstaller_name: shadowmask-macos
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Build executable
        run: |
          pyinstaller src/shadowmask/gui.py --onefile --name ${{ matrix.pyinstaller_name }}

      - name: Upload executable
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.pyinstaller_name }}

  build_android:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Buildozer and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev libssl-dev zlib1g-dev python3-dev openjdk-8-jdk unzip
          pip install buildozer

      - name: Build APK
        run: buildozer android debug

      - name: Find APK
        id: find_apk
        run: echo "APK_PATH=$(find . -name '*.apk' | head -n 1)" >> $GITHUB_ENV

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: shadowmask-android.apk
          path: ${{ env.APK_PATH }}

  pypi_publish:
    name: Upload release to PyPI
    needs: [build_wheels, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release with Binaries
    needs: [build_wheels, build_binaries, build_android, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download dist artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Download Linux binary
        uses: actions/download-artifact@v3
        with:
          name: shadowmask-linux
          path: dist/

      - name: Download Windows binary
        uses: actions/download-artifact@v3
        with:
          name: shadowmask-windows.exe
          path: dist/

      - name: Download macOS binary
        uses: actions/download-artifact@v3
        with:
          name: shadowmask-macos
          path: dist/

      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: shadowmask-android.apk
          path: dist/

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
